import pandas as pd
import json
from openpyxl import load_workbook
from redcap import Project, RedcapError
from smtplib import SMTP
from contextlib import contextmanager
import sys
import gc
from ratelimit import limits,sleep_and_retry
import os, shutil


URL = ''

#API_KEY = ''  #TEST SITE
API_KEY = ''  #LIVE SITE
project = Project(URL, API_KEY)
chunk_size = 50

SexList = ['Male', 'Female', 'Unknown']

cityIndex = ''

city_dict = {

"Aurora":"4",
"AURORA T":"4",
"BRADFORD-W G T":"8",
"BRAMPTON C":"9",
"BROCK TP":"11",
"caledon":"13",
"CALEDON T":"13",
"E GWILLIMBURY T":"20",
"East Gwillimbury":"20",
"ELDON TP":"",
"Georgina":"24",
"GEORGINA T":"24",
"Holland Landing":"20",
"Jackson's Point":"24",
"Keswick":"24",
"King":"32",
"KING TP":"32",
"Markham":"35",
"MARKHAM C":"35",
"NEW TECUMSETH T":"41",
"Newmarket":"42",
"NEWMARKET T":"42",
"PICKERING T":"55",
"RAMARA TP":"58",
"Richmond Hill":"59",
"RICHMOND HILL T":"59",
"Sutton":"24",
"Thornhill":"72",
"69, Toronto ET C":"69",
"69, Toronto NY C":"69",
"69, Toronto SC C":"69",
"Unionville":"35",
"UXBRIDGE TP":"71",
"Vaughan":"72",
"VAUGHAN C":"72",
"Whitchurch - Stouffville":"78",
"WHITCHURCH-S T":"78",
"Woodbridge":"72"

}

HouseDict = {
    "A" : 8,
    'B' :1,
    'C':7,
    'D':2,
    'E':2,
    'F':7,
    'G':10,
    'H':2,
    'I':5,
    'J':3,
    'K':11,
    'L':10,
    'M':7,
    'N':3,
    'O':10,
    'P':6,
    'Q':10,
    'R':0,
    'S':4,
    'T':11,
    'U':3,
    'V':6,
    'W':11,
    'X':5,
    'Y':9,
    'Z':''
}

hospital_dict = {

"Headwaters Health Care Centre" : "0",
"Humber River Regional (Wilson Site)" : "10 ",
"Mackenzie Health (Richmond Hill Site)" : "11 ",
"Cortellucci Vaughan Hospital" : "17 ",
"Markham Stouffville Hospital (Markham Site)" : "18 ",
"Markham Stouffville Hospital (Uxbridge Site)" : "19 ",
"North York General" : "20 ",
"Soldiers Memorial Hospital" : "26 ",
"Birchmount Hospital (Scarborough Health Network)" : "27 ",
"Centenary Hospital - Scarborough Health Network" : "30 ",
"Centenary (Cath Lab) - Scarborough Health Network" : "31 ",
"Southlake Regional Health Centre" : "31 ",
"Southlake Regional (Cath. Lab)" : "33 ",
"St. Michael's Hospital" : "33 ",
"Stevenson Memorial Hospital (Alliston)" : "36 ",
"Sunnybrook Health Sciences" : "37 ",
"Sunnybrook Health Sciences (Cath Lab)" : "38 ",
"Hospital for Sick Children" : "38 ",
"Toronto General Hospital" : "39 ",
"Toronto Western Hospital" : "43 ",
"Brampton Civic - William Osler Health System" : "44 ",
"Brampton Civic (Cath Lab) - William Osler Health" : "46 ",
"Etobicoke General - William Osler Health System" : "46 ",




}




def categorize_age(days):
    if pd.isna(days):
        return "3" #"CNO"  # If age can't be determined
    years = days // 365
    if years >= 3:
        return "0" # "Years"  # Age 3 years or greater
    elif days > 30:
        return "1" #"Months"  # Age > 30 days but < 3 years
    else:
        return "2" #"Days"  # Age 30 days or less

def walklevel(path, depth = 1):
    """It works just like os.walk, but you can pass it a level parameter
       that indicates how deep the recursion will go.
       If depth is 1, the current directory is listed.
       If depth is 0, nothing is returned.
       If depth is -1 (or less than 0), the full depth is walked.
    """
    # If depth is negative, just walk
    # Not using yield from for python2 compat
    # and copy dirs to keep consistant behavior for depth = -1 and depth = inf
    if depth < 0:
        for root, dirs, files in os.walk(path):
            yield root, dirs[:], files
        return
    elif depth == 0:
        return

    # path.count(os.path.sep) is safe because
    # - On Windows "\\" is never allowed in the name of a file or directory
    # - On UNIX "/" is never allowed in the name of a file or directory
    # - On MacOS a literal "/" is quitely translated to a ":" so it is still
    #   safe to count "/".
    base_depth = path.rstrip(os.path.sep).count(os.path.sep)
    for root, dirs, files in os.walk(path):
        yield root, dirs[:], files
        cur_depth = root.count(os.path.sep)
        if base_depth + depth <= cur_depth:
            del dirs[:]

@contextmanager
def network_share_auth(share, username=None, password=None, drive_letter='F'):
    """Context manager that mounts the given share using the given
    username and password to the given drive letter when entering
    the context and unmounts it when exiting."""
    os.system("NET USE %s: /DELETE" % drive_letter)
    cmd_parts = ["NET USE %s: %s" % (drive_letter, share)]
    if password:
        cmd_parts.append(password)
    if username:
        cmd_parts.append("/USER:%s" % username)
    os.system(" ".join(cmd_parts))
    try:
        yield
    finally:
        os.system("NET USE %s: /DELETE" % drive_letter)

username =""
password = ""

# username =""
# password = ""

new_columns = {
    "LAST_NAME_INFO_PERSONAL":	"cr_sname",
    "FIRST_NAME_INFO_PERSONAL":	"cr_gname",
    "ADDRESS_1_NT_PICKUP_LOC":	"cr_puadd",
    "CITY_TOWN_NT_PICKUP_LOC":	"cr_pucity",
    "UTM":	"cr_utmeast",
    "DETAILS__INSURANCE_HI":	"cr_hcn",
    "DATE_OF_BIRTH_INFO_PERSONAL":	"cr_dob",
    "GENDER_INFO_PERSONAL":	"cr_sexp",
    "ADDRESS_1__MAILING_ADDR":	"cr_madd",
    "CITY__MAILING_ADDR":	"cr_mcity",
    "TYPE_RES_START_CPR":	"cr_tx",
    "CALL_DATE_DATE_IDENT_GENERAL":	"cr_epdt",
    "TIME_DATE_PT_TRANSPT_PS":	"cr_ptmlft",
    "ARREST_WITNESSED_BY_DICARRST":	"cr_witbys",
    "TYPE_ELCTR_THERAPY":	"cr_emsshk",
    "DRUG_NAME__DRUG_THERAPY":	"cr_epi",
    "RECEIVING_FACILITY_ENT_DEST":	"cr_v2hospid1"
}

mapping = {'F': '0', 'M': '1', 'Unknown': '2'}

witbys_mapping =  {"Bystander": '1',
                    "Unwitnessed": '0',
                    "Paramedic":'2', }


print(new_columns)
new_columns_list = list(new_columns.values())
new_columns_list.append('PATIENT_ID')

print(new_columns_list)

pd.set_option('display.max_columns', None)

TIME_IN_SECONDS = 60
CALLS = 500
@sleep_and_retry
@limits(calls=CALLS, period=TIME_IN_SECONDS)
def stop_call_api():
    return
RCworkbook = load_workbook(filename="////RecordCount.xlsx")

RCsheet = RCworkbook.active
recordid = RCsheet.cell(row=1, column=1).value + 1

print(str(recordid))


with network_share_auth(r"a", username, password):
    # Define the folder path
    folder_path = r""

    # Check for Excel files in the folder
    excel_files = [f for f in os.listdir(folder_path) if f.endswith(('.xlsx', '.xls'))]

    if excel_files:
        file_path = os.path.join(folder_path, excel_files[0])  # Use the first Excel file found
        df_callnum = pd.read_excel(file_path,sheet_name="Cases_identified", engine="openpyxl")
        df_raw_data = pd.read_excel( file_path, sheet_name="RawData_CLEANED", engine="openpyxl")
        print(f"Loaded: {file_path}")

    else:
        print("No Excel file found in the folder.")
        sys.exit()


 
    df_unique = df_raw_data.drop_duplicates(subset="PATIENT_ID", keep="first")

    num_rows = df_raw_data.shape[0]  # Number of rows
    print(f"Number of rows: {num_rows}")
    num_rows = df_unique.shape[0]  # Number of rows
    print(f"Number of rows: {num_rows}")
    del(num_rows)
    gc.collect()  # free up memory after deletion of dataframe df_raw_data

    df_unique = df_unique.rename(columns=new_columns)

    df_unique = df_unique.reset_index(drop=True)

    df_unique = df_unique[new_columns_list]

    print(df_unique)



    df_unique["cr_utmnorth"]= df_unique["cr_utmeast"]
    df_unique["cr_hcnv"]=  df_unique["cr_hcn"]
    df_unique["cr_estagev"]= df_unique["cr_dob"]
    df_unique["cr_arryth"]= df_unique["cr_epi"]
    df_unique["cr_nalox"] = df_unique["cr_epi"]
    df_unique["cr_pacing"]= df_unique["cr_emsshk"]
    df_unique["cr_estageu"]=   df_unique["cr_dob"]
    df_unique["cr_estagev"]=   df_unique["cr_dob"]
    df_unique["cr_ptmrcv"]= df_unique["cr_epdt"]
    df_unique["cr_ccmech"]= df_unique["cr_tx"]
    df_unique["cr_pdisp" ]= df_unique["cr_v2hospid1"]

    print(df_unique)

    # Clean up the data
    df_unique = df_unique.fillna("")
    df_unique = df_unique.replace({pd.NA: "", pd.NaT: "", None: ""})
    df_unique['cr_sname'] = df_unique['cr_sname'].replace({'': 'CNO', None: 'CNO','Cno':'CNO','C.N.O.':'CNO', 'No pt contact':'CNO','No Patient Contact':'CNO'}).apply(lambda x: 'CNO' if str(x).strip() == '' else x)
    df_unique['cr_gname'] = df_unique['cr_sname'].replace({'': 'CNO', None: 'CNO', 'Cno': 'CNO', 'C.N.O.': 'CNO', 'No pt contact': 'CNO','No Patient Contact':'CNO'}).apply(lambda x: 'CNO' if str(x).strip() == '' else x)
    df_unique['cr_pucity'] = df_unique['cr_pucity'].map(city_dict)
    df_unique['cr_utmeast'] = df_unique['cr_utmeast'].apply(lambda x: str(x)[:3] if len(str(x)) == 7 and str(x).isdigit() else '')
    df_unique['cr_utmnorth'] = df_unique['cr_utmnorth'].apply(lambda x: str(x)[-4:] if len(str(x)) == 7 and str(x).isdigit() else '')
    df_unique['cr_hcn'] = df_unique['cr_hcn'].str.extract(r'Health Insurance Number: (\d+)')
    df_unique['cr_hcnv'] = df_unique['cr_hcnv'].str.extract(r'Version #: (\w+)')
    df_unique['cr_dob'] = pd.to_datetime(df_unique['cr_dob'],errors='coerce').dt.date
    df_unique['cr_sexp'] = df_unique['cr_sexp'].map(mapping).fillna("")
    df_unique['cr_mcity'] = df_unique['cr_mcity'].map(city_dict)
    df_unique['cr_tx'] = df_unique['cr_tx'].isin(["Manual Compressions", "AutoPulse"]).astype(int)
    df_unique['cr_epdt'] = pd.to_datetime(df_unique['cr_epdt'], errors='coerce').dt.date
    df_unique['age_days'] = (df_unique['cr_epdt'] - df_unique['cr_dob']).dt.days
    df_unique['cr_estageu'] = df_unique['age_days'].apply(categorize_age)
    # Calculate age in years (rounding only if decimal is 0.5 or greater)
    df_unique['cr_estagev'] = df_unique['age_days'].apply(lambda x: round(x / 365) if pd.notna(x) else "")
    df_unique['cr_pdisp_mic_check'] = df_unique['cr_pdisp']
    df_unique['cr_pdisp'] = df_unique['cr_pdisp'].notna() & df_unique['cr_pdisp'].ne("")
    df_unique['cr_pdisp'] = df_unique['cr_pdisp'].astype(int)  # Convert boolean to 0/1
    df_unique['cr_witbys'] = df_unique['cr_witbys'].map(witbys_mapping).fillna("")
    df_unique['cr_ptmlft'] = pd.to_datetime(df_unique['cr_ptmlft'], errors = 'coerce').dt.date.fillna("")
    # Set cr_ccmech to 1 if "AutoPulse" appears anywhere in the text, else blank
    df_unique['cr_ccmech'] = df_unique['cr_ccmech'].str.contains("AutoPulse", case=False, na=False).astype(int).replace(0,"")
    df_unique['cr_emsshk'] = df_unique['cr_emsshk'].isin(["(360) Defibrillation - Manual", "(360) Defibrillation - Semi-Automatic"]).astype(int).replace(0,"")
    df_unique['cr_epi'] = df_unique['cr_epi'].str.contains("epinephrine", case=False, na=False).astype(int).replace(0, "")
    df_unique['cr_arryth'] = df_unique['cr_arryth'].str.contains("lidocaine", case=False, na=False).astype(int).replace(0, "")
    df_unique['cr_nalox'] = df_unique['cr_nalox'].str.contains("naloxone", case=False, na=False).astype(int).replace(0, "")
    df_unique['cr_pacing'] = df_unique['cr_pacing'].str.contains("Pacing – Transcutaneous", case=False, na=False).astype(int).replace(0, "")
    df_unique['cr_v2hospid1'] = df_unique['cr_v2hospid1'].map(hospital_dict).fillna(0).astype(int)
    df_unique['cr_record_id'] =  [str(num) + "TO" for num in range(recordid, recordid + len(df_unique))]
    df_unique = pd.merge(df_unique, df_callnum[['PATIENT_ID', 'Call_Number']], on='PATIENT_ID', how='left')
    df_unique.rename(columns={'Call_Number': 'cr_callnum'}, inplace=True)
    del df_unique['PATIENT_ID']
    del df_unique['age_days']
    del df_unique['cr_pdisp_mic_check']
    try:

        API_KEY = ''  #R2 Test
        stop_call_api()

        project = Project(URL, API_KEY)
        chunks = [df_unique.iloc[i:i + chunk_size] for i in range(0, len(df_unique), chunk_size)]

        # Example: Process each chunk
        for idx, chunk in enumerate(chunks):
            print(f"Processing Chunk {idx + 1} with {len(chunk)} rows")
            print(chunk)
            print("\n")
            response = project.import_records(chunk, overwrite='overwrite', import_format='df')
            print(response)
            stop_call_api()

        last_record_id = recordid + len(df_unique) - 1
        RCsheet.cell(row=1, column=2).value = last_record_id #change to updating column 1
        print(recordid)

        RCworkbook.save("//vs-research//research//R2_Data//Halton Staging//RecordCount.xlsx")

        try:
            os.remove(file_path)
            print(f"Deleted: {file_path}")
        except PermissionError:
            print(f"Could not delete {file_path}. It might be open in another program.")
            sys.exit()


    except Exception as e:

        body = str(e)
        print(body)
        print(df_unique)

        subject = "York Import error- "

        message = "From: {0}\nTo: {1}\nSubject: {2}\n\n{3}\n\n".format("noreply@smh.ca",
                                                                       "mcbarnettr@smh.ca",
                                                                       subject,
                                                                       body)
        with SMTP("199.71.171.11", port=25) as smtp:
            smtp.sendmail("noreply@smh.ca", "mcbarnettr@smh.ca", message)

        sys.exit()













